definitions:
  server.createUserRequest:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - user
        - agent
        type: string
      username:
        type: string
    required:
    - dob
    - email
    - first_name
    - last_name
    - password
    - role
    - username
    type: object
  server.getListingByIDRequest:
    properties:
      PropertyID:
        type: integer
      Username:
        type: string
    required:
    - PropertyID
    - Username
    type: object
  server.getPropertyByIDRequest:
    properties:
      PropertyID:
        type: integer
      Username:
        type: string
    required:
    - PropertyID
    - Username
    type: object
  server.listingResponse:
    properties:
      AcceptedBidID:
        type: integer
      AgentID:
        type: integer
      Description:
        type: string
      ID:
        type: integer
      ListingDate:
        type: string
      ListingStatus:
        type: string
      Price:
        type: string
      PropertyID:
        type: integer
    required:
    - AcceptedBidID
    - AgentID
    - Description
    - ID
    - ListingDate
    - ListingStatus
    - Price
    - PropertyID
    type: object
  server.loginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  server.loginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/server.userResponse'
    type: object
  server.propertyResponse:
    properties:
      Address:
        type: string
      City:
        type: string
      ID:
        type: integer
      NumOfBathrooms:
        type: integer
      NumOfBedrooms:
        type: integer
      Owner:
        type: integer
      State:
        type: string
      ZipCode:
        type: integer
    required:
    - Address
    - City
    - ID
    - NumOfBathrooms
    - NumOfBedrooms
    - Owner
    - State
    - ZipCode
    type: object
  server.userMeResponse:
    properties:
      user:
        $ref: '#/definitions/server.userResponse'
    type: object
  server.userResponse:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        enum:
        - user
        - agent
        type: string
      username:
        type: string
    required:
    - dob
    - email
    - first_name
    - last_name
    - role
    - username
    type: object
info:
  contact: {}
paths:
  /example/helloworld:
    get:
      consumes:
      - application/json
      description: HelloWorld example
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: HelloWorld example
      tags:
      - example
  /health:
    get:
      description: Returns the health status of the server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health Check
      tags:
      - health
  /listing/getListingByPropertyID:
    post:
      consumes:
      - application/json
      description: get listing by property id
      parameters:
      - description: get listig by property id
        in: body
        name: getListingByIDRequest
        required: true
        schema:
          $ref: '#/definitions/server.getListingByIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.listingResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get listing by property id
      tags:
      - listing
  /property/getPropertyByID:
    post:
      consumes:
      - application/json
      description: get property by id
      parameters:
      - description: get property by id
        in: body
        name: getPropertyByIDRequest
        required: true
        schema:
          $ref: '#/definitions/server.getPropertyByIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.propertyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get property by id
      tags:
      - property
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token along with user
        details.
      parameters:
      - description: Login request
        in: body
        name: loginUserRequest
        required: true
        schema:
          $ref: '#/definitions/server.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/server.loginUserResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User login
      tags:
      - users
  /user/me:
    get:
      consumes:
      - application/json
      description: Retrieves the information of the authenticated user based on the
        authorization token provided.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user information
          schema:
            $ref: '#/definitions/server.userMeResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get authenticated user information
      tags:
      - user
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create User Request
        in: body
        name: createUserRequest
        required: true
        schema:
          $ref: '#/definitions/server.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
swagger: "2.0"
