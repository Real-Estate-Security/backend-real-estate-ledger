definitions:
  server.NullableTime:
    properties:
      time:
        type: string
      valid:
        type: boolean
    type: object
  server.RepresentationsWithNullableTime:
    properties:
      agent_id:
        type: integer
      created_at:
        type: string
      end_date:
        $ref: '#/definitions/server.NullableTime'
      id:
        type: integer
      is_active:
        type: boolean
      signed_date:
        $ref: '#/definitions/server.NullableTime'
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  server.createUserRequest:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - user
        - agent
        type: string
      username:
        type: string
    required:
    - dob
    - email
    - first_name
    - last_name
    - password
    - role
    - username
    type: object
  server.loginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  server.loginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/server.userResponse'
    type: object
  server.requestAgentRepresentationRequest:
    properties:
      client_username:
        type: string
      end_date:
        type: string
      start_date:
        type: string
    required:
    - client_username
    - end_date
    - start_date
    type: object
  server.userMeResponse:
    properties:
      user:
        $ref: '#/definitions/server.userResponse'
    type: object
  server.userResponse:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        enum:
        - user
        - agent
        type: string
      username:
        type: string
    required:
    - dob
    - email
    - first_name
    - last_name
    - role
    - username
    type: object
info:
  contact: {}
paths:
  /agent/accept-representation/{id}:
    post:
      consumes:
      - application/json
      description: Allows an agent to accept a representation request.
      parameters:
      - description: Representation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Representation request accepted successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Representation not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Accept representation request
      tags:
      - agent
  /agent/decline-representation/{id}:
    post:
      consumes:
      - application/json
      description: Allows an agent to decline a representation request.
      parameters:
      - description: Representation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Representation request declined successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Representation not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Decline representation request
      tags:
      - agent
  /agent/representations:
    get:
      consumes:
      - application/json
      description: Fetches all representations for the authenticated user, whether
        they are an agent or a regular user.
      parameters:
      - description: 'Limit (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of representations
          schema:
            items:
              $ref: '#/definitions/server.RepresentationsWithNullableTime'
            type: array
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List representations
      tags:
      - representations
  /agent/request-representation:
    post:
      consumes:
      - application/json
      description: Allows an agent to request representation for a user.
      parameters:
      - description: Request Representation Request
        in: body
        name: requestAgentRepresentationRequest
        required: true
        schema:
          $ref: '#/definitions/server.requestAgentRepresentationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Representation request submitted successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Client not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Request representation
      tags:
      - agent
  /health:
    get:
      description: Returns the health status of the server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health Check
      tags:
      - health
  /hello-world:
    get:
      consumes:
      - application/json
      description: HelloWorld example
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: HelloWorld example
      tags:
      - example
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token along with user
        details.
      parameters:
      - description: Login request
        in: body
        name: loginUserRequest
        required: true
        schema:
          $ref: '#/definitions/server.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/server.loginUserResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User login
      tags:
      - users
  /user/me:
    get:
      consumes:
      - application/json
      description: Retrieves the information of the authenticated user based on the
        authorization token provided.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user information
          schema:
            $ref: '#/definitions/server.userMeResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get authenticated user information
      tags:
      - user
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create User Request
        in: body
        name: createUserRequest
        required: true
        schema:
          $ref: '#/definitions/server.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
swagger: "2.0"
