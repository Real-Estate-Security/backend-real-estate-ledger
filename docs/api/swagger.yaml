definitions:
  server.NullableTime:
    properties:
      time:
        type: string
      valid:
        type: boolean
    type: object
  server.RepresentationData:
    properties:
      agent_first_name:
        type: string
      agent_id:
        type: integer
      agent_last_name:
        type: string
      agent_username:
        type: string
      client_first_name:
        type: string
      client_id:
        type: integer
      client_last_name:
        type: string
      client_username:
        type: string
      end_date:
        $ref: '#/definitions/server.NullableTime'
      id:
        type: integer
      is_active:
        type: boolean
      requested_at:
        type: string
      signed_at:
        $ref: '#/definitions/server.NullableTime'
      start_date:
        type: string
      status:
        type: string
    type: object
  server.bidResponse:
    properties:
      AgentID:
        type: integer
      Amount:
        type: string
      BuyerID:
        type: integer
      ID:
        type: integer
      ListingID:
        type: integer
      PreviousBidID:
        type: integer
    required:
    - AgentID
    - Amount
    - BuyerID
    - ID
    - ListingID
    - PreviousBidID
    type: object
  server.createBidRequest:
    properties:
      AgentID:
        type: integer
      Amount:
        type: string
      BuyerID:
        type: integer
      ListingID:
        type: integer
      PreviousBidID:
        type: integer
    required:
    - AgentID
    - Amount
    - BuyerID
    - ListingID
    type: object
  server.createListingRequest:
    properties:
      Address:
        type: string
      AgentEmail:
        type: string
      AgentFirstName:
        type: string
      AgentLastName:
        type: string
      Bathrooms:
        type: integer
      Bedrooms:
        type: integer
      City:
        type: string
      Description:
        type: string
      OwnerEmail:
        type: string
      OwnerFirstName:
        type: string
      OwnerLastName:
        type: string
      Price:
        type: string
      State:
        type: string
      Zipcode:
        type: integer
    required:
    - Address
    - AgentEmail
    - Bathrooms
    - Bedrooms
    - City
    - OwnerEmail
    - OwnerFirstName
    - OwnerLastName
    - Price
    - State
    - Zipcode
    type: object
  server.createUserRequest:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - user
        - agent
        type: string
      username:
        type: string
    required:
    - dob
    - email
    - first_name
    - last_name
    - password
    - role
    - username
    type: object
  server.getListingByIDRequest:
    properties:
      PropertyID:
        type: integer
      Username:
        type: string
    required:
    - PropertyID
    - Username
    type: object
  server.getPropertyByIDRequest:
    properties:
      PropertyID:
        type: integer
      Username:
        type: string
    required:
    - PropertyID
    - Username
    type: object
  server.listBidResponse:
    properties:
      AgentID:
        type: integer
      Amount:
        type: string
      BuyerID:
        type: integer
      ID:
        type: integer
      ListingID:
        type: integer
      PreviousBidID:
        type: integer
      Status:
        type: string
    required:
    - AgentID
    - Amount
    - BuyerID
    - ID
    - ListingID
    - PreviousBidID
    - Status
    type: object
  server.listBidsOnListingRequest:
    properties:
      ListingID:
        type: integer
    required:
    - ListingID
    type: object
  server.listBidsRequest:
    properties:
      Username:
        type: string
    required:
    - Username
    type: object
  server.listingDisplayResponse:
    properties:
      address:
        type: string
      bathrooms:
        type: integer
      bedrooms:
        type: integer
      city:
        type: string
      description:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      listing_date:
        type: string
      listing_status:
        type: string
      price:
        type: string
      state:
        type: string
      zipcode:
        type: integer
    type: object
  server.listingResponse:
    properties:
      AcceptedBidID:
        type: integer
      AgentID:
        type: integer
      Description:
        type: string
      ID:
        type: integer
      ListingDate:
        type: string
      ListingStatus:
        type: string
      Price:
        type: string
      PropertyID:
        type: integer
    required:
    - AcceptedBidID
    - AgentID
    - Description
    - ID
    - ListingDate
    - ListingStatus
    - Price
    - PropertyID
    type: object
  server.loginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  server.loginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/server.userResponse'
    type: object
  server.propertyResponse:
    properties:
      Address:
        type: string
      City:
        type: string
      ID:
        type: integer
      NumOfBathrooms:
        type: integer
      NumOfBedrooms:
        type: integer
      Owner:
        type: integer
      State:
        type: string
      ZipCode:
        type: integer
    required:
    - Address
    - City
    - ID
    - NumOfBathrooms
    - NumOfBedrooms
    - Owner
    - State
    - ZipCode
    type: object
  server.rejectBidRequest:
    properties:
      ID:
        type: integer
    required:
    - ID
    type: object
  server.requestAgentRepresentationRequest:
    properties:
      client_username:
        type: string
      end_date:
        type: string
      start_date:
        type: string
    required:
    - client_username
    - end_date
    - start_date
    type: object
  server.updateAcceptedBidIdByListingIdRequest:
    properties:
      AcceptedBidId:
        type: integer
      ListId:
        type: integer
    required:
    - AcceptedBidId
    - ListId
    type: object
  server.updateBidStatusRequest:
    properties:
      BidId:
        type: integer
      NewStatus:
        type: string
    required:
    - BidId
    - NewStatus
    type: object
  server.userMeResponse:
    properties:
      user:
        $ref: '#/definitions/server.userResponse'
    type: object
  server.userResponse:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        enum:
        - user
        - agent
        type: string
      username:
        type: string
    required:
    - dob
    - email
    - first_name
    - last_name
    - role
    - username
    type: object
info:
  contact: {}
paths:
  /agent/accept-representation/{id}:
    post:
      consumes:
      - application/json
      description: Allows an agent to accept a representation request.
      parameters:
      - description: Representation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Representation request accepted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Representation not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Accept representation request
      tags:
      - agent
  /agent/decline-representation/{id}:
    post:
      consumes:
      - application/json
      description: Allows an agent to decline a representation request.
      parameters:
      - description: Representation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Representation request declined successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Representation not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Decline representation request
      tags:
      - agent
  /agent/representation:
    get:
      consumes:
      - application/json
      description: Fetches all representations for the authenticated user, whether
        they are an agent or a regular user.
      parameters:
      - description: 'Limit (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of representations
          schema:
            items:
              $ref: '#/definitions/server.RepresentationData'
            type: array
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List representations
      tags:
      - representations
  /agent/request-representation:
    post:
      consumes:
      - application/json
      description: Allows an agent to request representation for a user.
      parameters:
      - description: Request Representation Request
        in: body
        name: requestAgentRepresentationRequest
        required: true
        schema:
          $ref: '#/definitions/server.requestAgentRepresentationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Representation request submitted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Client not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Request representation
      tags:
      - agent
  /bidding/acceptBid:
    put:
      consumes:
      - application/json
      description: accept a bid
      parameters:
      - description: accept a bid
        in: body
        name: rejectBidRequest
        required: true
        schema:
          $ref: '#/definitions/server.rejectBidRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: accept a bid
      tags:
      - bidding
  /bidding/createBid:
    post:
      consumes:
      - application/json
      description: create a bid
      parameters:
      - description: create a bid
        in: body
        name: createBidRequest
        required: true
        schema:
          $ref: '#/definitions/server.createBidRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.bidResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: create a bid
      tags:
      - bidding
  /bidding/listBids:
    post:
      consumes:
      - application/json
      description: listing all bids belonging to a given buyer
      parameters:
      - description: listing all bids belonging to a given buyer
        in: body
        name: buyerID
        required: true
        schema:
          $ref: '#/definitions/server.listBidsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: list of bids
          schema:
            items:
              $ref: '#/definitions/server.listBidResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: given user, list all bid with them as buyer
      tags:
      - bidding
  /bidding/listLatestBidOnListing:
    post:
      consumes:
      - application/json
      description: listing most recent bid on a listing
      parameters:
      - description: listing most recent bid on a specific listing
        in: body
        name: listingID
        required: true
        schema:
          $ref: '#/definitions/server.listBidsOnListingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: bid
          schema:
            $ref: '#/definitions/server.listBidResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: given listing, list most recent bid on a listing
      tags:
      - bidding
  /bidding/rejectBid:
    put:
      consumes:
      - application/json
      description: reject a bid
      parameters:
      - description: reject a bid
        in: body
        name: rejectBidRequest
        required: true
        schema:
          $ref: '#/definitions/server.rejectBidRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: reject a bid
      tags:
      - bidding
  /bidding/updateBidStatus:
    post:
      consumes:
      - application/json
      description: update a bid's status
      parameters:
      - description: update a bid status
        in: body
        name: updateBidStatusRequest
        required: true
        schema:
          $ref: '#/definitions/server.updateBidStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update a bid's status
      tags:
      - bidding
  /health:
    get:
      description: Returns the health status of the server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health Check
      tags:
      - health
  /hello-world:
    get:
      consumes:
      - application/json
      description: HelloWorld example
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: HelloWorld example
      tags:
      - example
  /listing:
    get:
      consumes:
      - application/json
      description: Get listings with optional pagination
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/server.listingDisplayResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Display properties
      tags:
      - listing
  /listing/getListingByPropertyID:
    post:
      consumes:
      - application/json
      description: get listing by property id
      parameters:
      - description: get listig by property id
        in: body
        name: getListingByIDRequest
        required: true
        schema:
          $ref: '#/definitions/server.getListingByIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.listingResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get listing by property id
      tags:
      - listing
  /listing/updateAcceptedBidIdByListingId:
    post:
      consumes:
      - application/json
      description: update accepted bid id for a given listing id
      parameters:
      - description: update accepted bid id for a given listing id
        in: body
        name: updateAcceptedBidIdByListingIdRequest
        required: true
        schema:
          $ref: '#/definitions/server.updateAcceptedBidIdByListingIdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update accepted bid id for a given listing id
      tags:
      - listing
  /properties:
    post:
      consumes:
      - application/json
      description: creating a listing for a property
      parameters:
      - description: creating a listing for a property
        in: body
        name: createListingRequest
        required: true
        schema:
          $ref: '#/definitions/server.createListingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: given listing, create property if doesn't exist and then create listing
        for that property
      tags:
      - properties
  /property/getPropertyByID:
    post:
      consumes:
      - application/json
      description: get property by id
      parameters:
      - description: get property by id
        in: body
        name: getPropertyByIDRequest
        required: true
        schema:
          $ref: '#/definitions/server.getPropertyByIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.propertyResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get property by id
      tags:
      - property
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token along with user
        details.
      parameters:
      - description: Login request
        in: body
        name: loginUserRequest
        required: true
        schema:
          $ref: '#/definitions/server.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/server.loginUserResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User login
      tags:
      - users
  /user/me:
    get:
      consumes:
      - application/json
      description: Retrieves the information of the authenticated user based on the
        authorization token provided.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user information
          schema:
            $ref: '#/definitions/server.userMeResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get authenticated user information
      tags:
      - user
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create User Request
        in: body
        name: createUserRequest
        required: true
        schema:
          $ref: '#/definitions/server.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
swagger: "2.0"
