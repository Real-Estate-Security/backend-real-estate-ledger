// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: representations.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const acceptRepresentation = `-- name: AcceptRepresentation :one
UPDATE representations
SET
    status = 'accepted',
    is_active = TRUE,
    signed_at = $1
WHERE id = $2
RETURNING id, user_id, agent_id, start_date, end_date, status, requested_at, signed_at, is_active
`

type AcceptRepresentationParams struct {
	SignedAt sql.NullTime `json:"signed_at"`
	ID       int64        `json:"id"`
}

func (q *Queries) AcceptRepresentation(ctx context.Context, arg AcceptRepresentationParams) (Representations, error) {
	row := q.db.QueryRowContext(ctx, acceptRepresentation, arg.SignedAt, arg.ID)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.RequestedAt,
		&i.SignedAt,
		&i.IsActive,
	)
	return i, err
}

const createRepresentation = `-- name: CreateRepresentation :one
INSERT INTO representations(
    user_id,
    agent_id,
    start_date,
    end_date
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, user_id, agent_id, start_date, end_date, status, requested_at, signed_at, is_active
`

type CreateRepresentationParams struct {
	UserID    int64        `json:"user_id"`
	AgentID   int64        `json:"agent_id"`
	StartDate time.Time    `json:"start_date"`
	EndDate   sql.NullTime `json:"end_date"`
}

func (q *Queries) CreateRepresentation(ctx context.Context, arg CreateRepresentationParams) (Representations, error) {
	row := q.db.QueryRowContext(ctx, createRepresentation,
		arg.UserID,
		arg.AgentID,
		arg.StartDate,
		arg.EndDate,
	)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.RequestedAt,
		&i.SignedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteRepresentation = `-- name: DeleteRepresentation :exec
DELETE FROM representations
WHERE id = $1
`

func (q *Queries) DeleteRepresentation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRepresentation, id)
	return err
}

const getRepresentationByID = `-- name: GetRepresentationByID :one
SELECT 
    r.id,
    r.user_id AS client_id,
    u.first_name AS client_first_name,
    u.last_name AS client_last_name,
    u.username AS client_username,
    r.agent_id,
    a.first_name AS agent_first_name,
    a.last_name AS agent_last_name,
    a.username AS agent_username,
    r.start_date,
    r.end_date,
    r.status,
    r.requested_at,
    r.signed_at,
    r.is_active
FROM representations r
JOIN users u ON r.user_id = u.id
JOIN users a ON r.agent_id = a.id
WHERE r.id = $1
`

type GetRepresentationByIDRow struct {
	ID              int64           `json:"id"`
	ClientID        int64           `json:"client_id"`
	ClientFirstName string          `json:"client_first_name"`
	ClientLastName  string          `json:"client_last_name"`
	ClientUsername  string          `json:"client_username"`
	AgentID         int64           `json:"agent_id"`
	AgentFirstName  string          `json:"agent_first_name"`
	AgentLastName   string          `json:"agent_last_name"`
	AgentUsername   string          `json:"agent_username"`
	StartDate       time.Time       `json:"start_date"`
	EndDate         sql.NullTime    `json:"end_date"`
	Status          AgreementStatus `json:"status"`
	RequestedAt     time.Time       `json:"requested_at"`
	SignedAt        sql.NullTime    `json:"signed_at"`
	IsActive        bool            `json:"is_active"`
}

func (q *Queries) GetRepresentationByID(ctx context.Context, id int64) (GetRepresentationByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRepresentationByID, id)
	var i GetRepresentationByIDRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientFirstName,
		&i.ClientLastName,
		&i.ClientUsername,
		&i.AgentID,
		&i.AgentFirstName,
		&i.AgentLastName,
		&i.AgentUsername,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.RequestedAt,
		&i.SignedAt,
		&i.IsActive,
	)
	return i, err
}

const listRepresentationsByAgentID = `-- name: ListRepresentationsByAgentID :many
SELECT 
    r.id,
    r.user_id AS client_id,
    u.first_name AS client_first_name,
    u.last_name AS client_last_name,
    u.username AS client_username,
    r.agent_id,
    a.first_name AS agent_first_name,
    a.last_name AS agent_last_name,
    a.username AS agent_username,
    r.start_date,
    r.end_date,
    r.status,
    r.requested_at,
    r.signed_at,
    r.is_active
FROM representations r
JOIN users u ON r.user_id = u.id
JOIN users a ON r.agent_id = a.id
WHERE r.agent_id = $1
ORDER BY r.id
LIMIT $2
OFFSET $3
`

type ListRepresentationsByAgentIDParams struct {
	AgentID int64 `json:"agent_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListRepresentationsByAgentIDRow struct {
	ID              int64           `json:"id"`
	ClientID        int64           `json:"client_id"`
	ClientFirstName string          `json:"client_first_name"`
	ClientLastName  string          `json:"client_last_name"`
	ClientUsername  string          `json:"client_username"`
	AgentID         int64           `json:"agent_id"`
	AgentFirstName  string          `json:"agent_first_name"`
	AgentLastName   string          `json:"agent_last_name"`
	AgentUsername   string          `json:"agent_username"`
	StartDate       time.Time       `json:"start_date"`
	EndDate         sql.NullTime    `json:"end_date"`
	Status          AgreementStatus `json:"status"`
	RequestedAt     time.Time       `json:"requested_at"`
	SignedAt        sql.NullTime    `json:"signed_at"`
	IsActive        bool            `json:"is_active"`
}

func (q *Queries) ListRepresentationsByAgentID(ctx context.Context, arg ListRepresentationsByAgentIDParams) ([]ListRepresentationsByAgentIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listRepresentationsByAgentID, arg.AgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRepresentationsByAgentIDRow{}
	for rows.Next() {
		var i ListRepresentationsByAgentIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ClientFirstName,
			&i.ClientLastName,
			&i.ClientUsername,
			&i.AgentID,
			&i.AgentFirstName,
			&i.AgentLastName,
			&i.AgentUsername,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.RequestedAt,
			&i.SignedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepresentationsByUserID = `-- name: ListRepresentationsByUserID :many
SELECT 
    r.id,
    r.user_id AS client_id,
    u.first_name AS client_first_name,
    u.last_name AS client_last_name,
    u.username AS client_username,
    r.agent_id,
    a.first_name AS agent_first_name,
    a.last_name AS agent_last_name,
    a.username AS agent_username,
    r.start_date,
    r.end_date,
    r.status,
    r.requested_at,
    r.signed_at,
    r.is_active
FROM representations r
JOIN users u ON r.user_id = u.id
JOIN users a ON r.agent_id = a.id
WHERE r.user_id = $1
ORDER BY r.id
LIMIT $2
OFFSET $3
`

type ListRepresentationsByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListRepresentationsByUserIDRow struct {
	ID              int64           `json:"id"`
	ClientID        int64           `json:"client_id"`
	ClientFirstName string          `json:"client_first_name"`
	ClientLastName  string          `json:"client_last_name"`
	ClientUsername  string          `json:"client_username"`
	AgentID         int64           `json:"agent_id"`
	AgentFirstName  string          `json:"agent_first_name"`
	AgentLastName   string          `json:"agent_last_name"`
	AgentUsername   string          `json:"agent_username"`
	StartDate       time.Time       `json:"start_date"`
	EndDate         sql.NullTime    `json:"end_date"`
	Status          AgreementStatus `json:"status"`
	RequestedAt     time.Time       `json:"requested_at"`
	SignedAt        sql.NullTime    `json:"signed_at"`
	IsActive        bool            `json:"is_active"`
}

func (q *Queries) ListRepresentationsByUserID(ctx context.Context, arg ListRepresentationsByUserIDParams) ([]ListRepresentationsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listRepresentationsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRepresentationsByUserIDRow{}
	for rows.Next() {
		var i ListRepresentationsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ClientFirstName,
			&i.ClientLastName,
			&i.ClientUsername,
			&i.AgentID,
			&i.AgentFirstName,
			&i.AgentLastName,
			&i.AgentUsername,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.RequestedAt,
			&i.SignedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectRepresentation = `-- name: RejectRepresentation :one
UPDATE representations
SET
    status = 'rejected',
    is_active = FALSE,
    updated_at = now()
WHERE id = $1
RETURNING id, user_id, agent_id, start_date, end_date, status, requested_at, signed_at, is_active
`

func (q *Queries) RejectRepresentation(ctx context.Context, id int64) (Representations, error) {
	row := q.db.QueryRowContext(ctx, rejectRepresentation, id)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.RequestedAt,
		&i.SignedAt,
		&i.IsActive,
	)
	return i, err
}

const updateRepresentation = `-- name: UpdateRepresentation :one
UPDATE representations
SET
    user_id = $1,
    agent_id = $2,
    start_date = $3,
    end_date = $4,
    status = $5,
    requested_at = $6,
    signed_at = $7,
    is_active = $8
WHERE id = $9
RETURNING id, user_id, agent_id, start_date, end_date, status, requested_at, signed_at, is_active
`

type UpdateRepresentationParams struct {
	UserID      int64           `json:"user_id"`
	AgentID     int64           `json:"agent_id"`
	StartDate   time.Time       `json:"start_date"`
	EndDate     sql.NullTime    `json:"end_date"`
	Status      AgreementStatus `json:"status"`
	RequestedAt time.Time       `json:"requested_at"`
	SignedAt    sql.NullTime    `json:"signed_at"`
	IsActive    bool            `json:"is_active"`
	ID          int64           `json:"id"`
}

func (q *Queries) UpdateRepresentation(ctx context.Context, arg UpdateRepresentationParams) (Representations, error) {
	row := q.db.QueryRowContext(ctx, updateRepresentation,
		arg.UserID,
		arg.AgentID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.RequestedAt,
		arg.SignedAt,
		arg.IsActive,
		arg.ID,
	)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.RequestedAt,
		&i.SignedAt,
		&i.IsActive,
	)
	return i, err
}
