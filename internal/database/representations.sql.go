// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: representations.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const acceptRepresentation = `-- name: AcceptRepresentation :one
UPDATE representations
SET
    status = 'accepted',
    signed_date = $1
WHERE id = $2
RETURNING id, user_id, agent_id, start_date, end_date, status, signed_date, created_at, updated_at, is_active
`

type AcceptRepresentationParams struct {
	SignedDate sql.NullTime `json:"signed_date"`
	ID         int64        `json:"id"`
}

func (q *Queries) AcceptRepresentation(ctx context.Context, arg AcceptRepresentationParams) (Representations, error) {
	row := q.db.QueryRowContext(ctx, acceptRepresentation, arg.SignedDate, arg.ID)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.SignedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const createRepresentation = `-- name: CreateRepresentation :one
INSERT INTO representations(
    user_id,
    agent_id,
    start_date,
    end_date,
    is_active
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, user_id, agent_id, start_date, end_date, status, signed_date, created_at, updated_at, is_active
`

type CreateRepresentationParams struct {
	UserID    int64        `json:"user_id"`
	AgentID   int64        `json:"agent_id"`
	StartDate time.Time    `json:"start_date"`
	EndDate   sql.NullTime `json:"end_date"`
	IsActive  bool         `json:"is_active"`
}

func (q *Queries) CreateRepresentation(ctx context.Context, arg CreateRepresentationParams) (Representations, error) {
	row := q.db.QueryRowContext(ctx, createRepresentation,
		arg.UserID,
		arg.AgentID,
		arg.StartDate,
		arg.EndDate,
		arg.IsActive,
	)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.SignedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteRepresentation = `-- name: DeleteRepresentation :exec
DELETE FROM representations
WHERE id = $1
`

func (q *Queries) DeleteRepresentation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRepresentation, id)
	return err
}

const getRepresentationByID = `-- name: GetRepresentationByID :one
SELECT id, user_id, agent_id, start_date, end_date, status, signed_date, created_at, updated_at, is_active FROM representations
WHERE id = $1
`

func (q *Queries) GetRepresentationByID(ctx context.Context, id int64) (Representations, error) {
	row := q.db.QueryRowContext(ctx, getRepresentationByID, id)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.SignedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const listRepresentationsByAgentID = `-- name: ListRepresentationsByAgentID :many
SELECT id, user_id, agent_id, start_date, end_date, status, signed_date, created_at, updated_at, is_active FROM representations
WHERE agent_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListRepresentationsByAgentIDParams struct {
	AgentID int64 `json:"agent_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListRepresentationsByAgentID(ctx context.Context, arg ListRepresentationsByAgentIDParams) ([]Representations, error) {
	rows, err := q.db.QueryContext(ctx, listRepresentationsByAgentID, arg.AgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Representations{}
	for rows.Next() {
		var i Representations
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AgentID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.SignedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepresentationsByUserID = `-- name: ListRepresentationsByUserID :many
SELECT id, user_id, agent_id, start_date, end_date, status, signed_date, created_at, updated_at, is_active FROM representations
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListRepresentationsByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRepresentationsByUserID(ctx context.Context, arg ListRepresentationsByUserIDParams) ([]Representations, error) {
	rows, err := q.db.QueryContext(ctx, listRepresentationsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Representations{}
	for rows.Next() {
		var i Representations
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AgentID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.SignedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectRepresentation = `-- name: RejectRepresentation :one
UPDATE representations
SET
    status = 'rejected',
    updated_at = now()
WHERE id = $1
RETURNING id, user_id, agent_id, start_date, end_date, status, signed_date, created_at, updated_at, is_active
`

func (q *Queries) RejectRepresentation(ctx context.Context, id int64) (Representations, error) {
	row := q.db.QueryRowContext(ctx, rejectRepresentation, id)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.SignedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const updateRepresentation = `-- name: UpdateRepresentation :one
UPDATE representations
SET
    user_id = $1,
    agent_id = $2,
    start_date = $3,
    end_date = $4,
    is_active = $5
WHERE id = $6
RETURNING id, user_id, agent_id, start_date, end_date, status, signed_date, created_at, updated_at, is_active
`

type UpdateRepresentationParams struct {
	UserID    int64        `json:"user_id"`
	AgentID   int64        `json:"agent_id"`
	StartDate time.Time    `json:"start_date"`
	EndDate   sql.NullTime `json:"end_date"`
	IsActive  bool         `json:"is_active"`
	ID        int64        `json:"id"`
}

func (q *Queries) UpdateRepresentation(ctx context.Context, arg UpdateRepresentationParams) (Representations, error) {
	row := q.db.QueryRowContext(ctx, updateRepresentation,
		arg.UserID,
		arg.AgentID,
		arg.StartDate,
		arg.EndDate,
		arg.IsActive,
		arg.ID,
	)
	var i Representations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.SignedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}
