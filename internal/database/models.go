// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type AgreementStatus string

const (
	AgreementStatusPending  AgreementStatus = "pending"
	AgreementStatusAccepted AgreementStatus = "accepted"
	AgreementStatusRejected AgreementStatus = "rejected"
)

func (e *AgreementStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AgreementStatus(s)
	case string:
		*e = AgreementStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AgreementStatus: %T", src)
	}
	return nil
}

type NullAgreementStatus struct {
	AgreementStatus AgreementStatus `json:"AgreementStatus"`
	Valid           bool            `json:"valid"` // Valid is true if AgreementStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAgreementStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AgreementStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AgreementStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAgreementStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AgreementStatus), nil
}

type BidStatus string

const (
	BidStatusPending   BidStatus = "pending"
	BidStatusAccepted  BidStatus = "accepted"
	BidStatusRejected  BidStatus = "rejected"
	BidStatusCountered BidStatus = "countered"
)

func (e *BidStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BidStatus(s)
	case string:
		*e = BidStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BidStatus: %T", src)
	}
	return nil
}

type NullBidStatus struct {
	BidStatus BidStatus `json:"BidStatus"`
	Valid     bool      `json:"valid"` // Valid is true if BidStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBidStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BidStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BidStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBidStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BidStatus), nil
}

type UserRole string

const (
	UserRoleUser  UserRole = "user"
	UserRoleAgent UserRole = "agent"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"UserRole"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Bids struct {
	ID            int64         `json:"id"`
	ListingID     int64         `json:"listing_id"`
	BuyerID       int64         `json:"buyer_id"`
	AgentID       int64         `json:"agent_id"`
	Amount        string        `json:"amount"`
	Status        BidStatus     `json:"status"`
	CreatedAt     time.Time     `json:"created_at"`
	PreviousBidID sql.NullInt64 `json:"previous_bid_id"`
}

type Listings struct {
	ID            int64          `json:"id"`
	PropertyID    int64          `json:"property_id"`
	AgentID       int64          `json:"agent_id"`
	Price         string         `json:"price"`
	ListingStatus string         `json:"listing_status"`
	ListingDate   time.Time      `json:"listing_date"`
	Description   sql.NullString `json:"description"`
	AcceptedBidID sql.NullInt64  `json:"accepted_bid_id"`
}

type Properties struct {
	ID        int64  `json:"id"`
	Owner     int64  `json:"owner"`
	Address   string `json:"address"`
	City      string `json:"city"`
	State     string `json:"state"`
	Zipcode   int32  `json:"zipcode"`
	Bedrooms  int32  `json:"bedrooms"`
	Bathrooms int32  `json:"bathrooms"`
}

type Representations struct {
	ID int64 `json:"id"`
	// Buyer being represented
	UserID int64 `json:"user_id"`
	// Real estate agent representing the buyer
	AgentID int64 `json:"agent_id"`
	// Date when representation started
	StartDate time.Time `json:"start_date"`
	// Date when representation ended, null if still active
	EndDate    sql.NullTime    `json:"end_date"`
	Status     AgreementStatus `json:"status"`
	SignedDate sql.NullTime    `json:"signed_date"`
	CreatedAt  time.Time       `json:"created_at"`
	UpdatedAt  time.Time       `json:"updated_at"`
	// Whether the representation is currently active
	IsActive bool `json:"is_active"`
}

type Users struct {
	ID             int64     `json:"id"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	Email          string    `json:"email"`
	Dob            time.Time `json:"dob"`
	CreatedAt      time.Time `json:"created_at"`
	Role           UserRole  `json:"role"`
}
