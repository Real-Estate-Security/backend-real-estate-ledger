// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: listing.sql

package database

import (
	"context"
	"database/sql"
)

const createListing = `-- name: CreateListing :one
INSERT INTO listings(
    property_id,
    agent_id,
    price,
    description
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, property_id, agent_id, price, listing_status, listing_date, description, accepted_bid_id
`

type CreateListingParams struct {
	PropertyID  int64          `json:"property_id"`
	AgentID     int64          `json:"agent_id"`
	Price       string         `json:"price"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateListing(ctx context.Context, arg CreateListingParams) (Listings, error) {
	row := q.db.QueryRowContext(ctx, createListing,
		arg.PropertyID,
		arg.AgentID,
		arg.Price,
		arg.Description,
	)
	var i Listings
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.AgentID,
		&i.Price,
		&i.ListingStatus,
		&i.ListingDate,
		&i.Description,
		&i.AcceptedBidID,
	)
	return i, err
}

const getListingByID = `-- name: GetListingByID :one
SELECT id, property_id, agent_id, price, listing_status, listing_date, description, accepted_bid_id FROM listings
WHERE id = $1
`

func (q *Queries) GetListingByID(ctx context.Context, id int64) (Listings, error) {
	row := q.db.QueryRowContext(ctx, getListingByID, id)
	var i Listings
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.AgentID,
		&i.Price,
		&i.ListingStatus,
		&i.ListingDate,
		&i.Description,
		&i.AcceptedBidID,
	)
	return i, err
}

const listListings = `-- name: ListListings :many
SELECT id, property_id, agent_id, price, listing_status, listing_date, description, accepted_bid_id FROM listings
ORDER BY id
`

func (q *Queries) ListListings(ctx context.Context) ([]Listings, error) {
	rows, err := q.db.QueryContext(ctx, listListings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Listings{}
	for rows.Next() {
		var i Listings
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.AgentID,
			&i.Price,
			&i.ListingStatus,
			&i.ListingDate,
			&i.Description,
			&i.AcceptedBidID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateListingAcceptedBidID = `-- name: UpdateListingAcceptedBidID :one
UPDATE listings 
SET 
    accepted_bid_id = $1
WHERE id = $2
RETURNING id, property_id, agent_id, price, listing_status, listing_date, description, accepted_bid_id
`

type UpdateListingAcceptedBidIDParams struct {
	AcceptedBidID sql.NullInt64 `json:"accepted_bid_id"`
	ID            int64         `json:"id"`
}

func (q *Queries) UpdateListingAcceptedBidID(ctx context.Context, arg UpdateListingAcceptedBidIDParams) (Listings, error) {
	row := q.db.QueryRowContext(ctx, updateListingAcceptedBidID, arg.AcceptedBidID, arg.ID)
	var i Listings
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.AgentID,
		&i.Price,
		&i.ListingStatus,
		&i.ListingDate,
		&i.Description,
		&i.AcceptedBidID,
	)
	return i, err
}

const updateListingPrice = `-- name: UpdateListingPrice :one
UPDATE listings 
SET 
    price = $1
WHERE id = $2
RETURNING id, property_id, agent_id, price, listing_status, listing_date, description, accepted_bid_id
`

type UpdateListingPriceParams struct {
	Price string `json:"price"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateListingPrice(ctx context.Context, arg UpdateListingPriceParams) (Listings, error) {
	row := q.db.QueryRowContext(ctx, updateListingPrice, arg.Price, arg.ID)
	var i Listings
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.AgentID,
		&i.Price,
		&i.ListingStatus,
		&i.ListingDate,
		&i.Description,
		&i.AcceptedBidID,
	)
	return i, err
}

const updateListingStatus = `-- name: UpdateListingStatus :one
UPDATE listings 
SET 
    listing_status = $1
WHERE id = $2
RETURNING id, property_id, agent_id, price, listing_status, listing_date, description, accepted_bid_id
`

type UpdateListingStatusParams struct {
	ListingStatus string `json:"listing_status"`
	ID            int64  `json:"id"`
}

func (q *Queries) UpdateListingStatus(ctx context.Context, arg UpdateListingStatusParams) (Listings, error) {
	row := q.db.QueryRowContext(ctx, updateListingStatus, arg.ListingStatus, arg.ID)
	var i Listings
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.AgentID,
		&i.Price,
		&i.ListingStatus,
		&i.ListingDate,
		&i.Description,
		&i.AcceptedBidID,
	)
	return i, err
}
