// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bidding.sql

package database

import (
	"context"
	"database/sql"
)

const createBid = `-- name: CreateBid :one
INSERT INTO bids(
    id, 
    listing_id, 
    buyer_id, 
    agent_id, 
    amount, 
    status, 
    created_at, 
    previous_bid_id
) VALUES (
    nextval('bids_id_seq'::regclass),
    $1,
    $2,
    $3,
    $4,
    'pending'::"BidStatus",
    now(),
    $5
)
RETURNING id, listing_id, buyer_id, agent_id, amount, status, created_at, previous_bid_id
`

type CreateBidParams struct {
	ListingID     int64         `json:"listing_id"`
	BuyerID       int64         `json:"buyer_id"`
	AgentID       int64         `json:"agent_id"`
	Amount        string        `json:"amount"`
	PreviousBidID sql.NullInt64 `json:"previous_bid_id"`
}

func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) (Bids, error) {
	row := q.db.QueryRowContext(ctx, createBid,
		arg.ListingID,
		arg.BuyerID,
		arg.AgentID,
		arg.Amount,
		arg.PreviousBidID,
	)
	var i Bids
	err := row.Scan(
		&i.ID,
		&i.ListingID,
		&i.BuyerID,
		&i.AgentID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.PreviousBidID,
	)
	return i, err
}
